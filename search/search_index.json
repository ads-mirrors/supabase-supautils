{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"supautils Documentation : https://supabase.github.io/supautils Source Code : https://github.com/supabase/supautils supautils is a PostgreSQL extension providing: Enhanced security for modifying roles The supabase SQL standard library Experimental/Unstable of the supabase hosted platform (behind setting flags)","title":"Welcome"},{"location":"#supautils","text":"Documentation : https://supabase.github.io/supautils Source Code : https://github.com/supabase/supautils supautils is a PostgreSQL extension providing: Enhanced security for modifying roles The supabase SQL standard library Experimental/Unstable of the supabase hosted platform (behind setting flags)","title":"supautils"},{"location":"contributing/","text":"supautils is OSS. PR and issues are welcome. Development Nix is required to set up the environment. Testing For testing the module locally, execute: 1 2 3 4 5 6 7 8 9 10 11 # might take a while in downloading all the dependencies $ nix-shell # test on pg 12 $ supautils-with-pg-12 make installcheck # test on pg 13 $ supautils-with-pg-13 make installcheck # you can also test manually with $ supautils-with-pg-12 psql -U rolecreator","title":"Contributing"},{"location":"contributing/#development","text":"Nix is required to set up the environment.","title":"Development"},{"location":"contributing/#testing","text":"For testing the module locally, execute: 1 2 3 4 5 6 7 8 9 10 11 # might take a while in downloading all the dependencies $ nix-shell # test on pg 12 $ supautils-with-pg-12 make installcheck # test on pg 13 $ supautils-with-pg-13 make installcheck # you can also test manually with $ supautils-with-pg-12 psql -U rolecreator","title":"Testing"},{"location":"experimental/","text":"","title":"Experimental"},{"location":"installation/","text":"Tested to work on PostgreSQL 12 and 13. Setup Server Clone this repo and run 1 make && make install To make the extension available to the database add on postgresql.conf : 1 shared_preload_libraries = 'supautils' Database To enable the extension in PostgreSQL we must execute a create extension statement. It is reccomended to create supautils in a schema to avoid naming conflicts. 1 2 create schema supa ; create extension supautils with schema supa;","title":"Installation"},{"location":"installation/#setup","text":"","title":"Setup"},{"location":"installation/#server","text":"Clone this repo and run 1 make && make install To make the extension available to the database add on postgresql.conf : 1 shared_preload_libraries = 'supautils'","title":"Server"},{"location":"installation/#database","text":"To enable the extension in PostgreSQL we must execute a create extension statement. It is reccomended to create supautils in a schema to avoid naming conflicts. 1 2 create schema supa ; create extension supautils with schema supa;","title":"Database"},{"location":"role_security/","text":"The supautils extension provides tooling to prevent non-superusers from modifying/granting a set of roles. Say your backend service depends on a connector role for connecting to the database. Also, you need to give database users the ability to create their own roles, i.e. they need the CREATEROLE privilege. A problem arises here, because any database user with CREATEROLE can DROP or ALTER the connector role, making your backend service fail. From role attributes docs : A role with CREATEROLE privilege can alter and drop other roles, too, as well as grant or revoke membership in them . However, to create, alter, drop, or change membership of a superuser role, superuser status is required; CREATEROLE is insufficient for that. The above problem can be solved by configuring this extension to protect the connector role: 1 supautils.reserved_roles = \"connector\" This extension also allows restricting memberships grants for a set of roles. Certain default postgres roles are dangerous to expose to every database user. From pg default roles : The pg_read_server_files, pg_write_server_files and pg_execute_server_program roles are intended to allow administrators to have trusted, but non-superuser, roles which are able to access files and run programs on the database server as the user the database runs as. As these roles are able to access any file on the server file system, they bypass all database-level permission checks when accessing files directly and they could be used to gain superuser-level access , therefore great care should be taken when granting these roles to users. For example, you can restrict doing GRANT pg_read_server_files TO my_role with: 1 supautils.reserved_memberships = \"pg_read_server_files\" Configuration Settings available in postgresql.conf : Protect Roles 1 supautils.reserved_roles = \"supabase_admin,supabase_auth_admin,supabase_storage_admin\" Protect Memberships 1 supautils.reserved_memberships = \"pg_read_server_files, pg_write_server_files, pg_execute_server_program\"","title":"Role Security"},{"location":"role_security/#configuration","text":"Settings available in postgresql.conf :","title":"Configuration"},{"location":"role_security/#protect-roles","text":"1 supautils.reserved_roles = \"supabase_admin,supabase_auth_admin,supabase_storage_admin\"","title":"Protect Roles"},{"location":"role_security/#protect-memberships","text":"1 supautils.reserved_memberships = \"pg_read_server_files, pg_write_server_files, pg_execute_server_program\"","title":"Protect Memberships"},{"location":"standard_library/","text":"Library Reference The supabase platform nudges users to collocate compute with data than is typical for PostgreSQL backed applications. As a result, the PostgreSQL standard library All examples assume supautils was created in a schema named supa . Array index Return one-based index in the array of the first item whose value is equal to x. Returns null if there is no such item. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 select supa . index ( array [ 'a' , 'b' , 'c' ], 'c' ); index ------- 3 ( 1 row ) select supa . index ( array [ 1 , 2 , 3 ], 4 ); index ------- ( 1 row ) select supa . index ( array []:: int [], 1 ); index ------- ( 1 row ) select supa . index ( null :: int [], 1 ); index ------- ( 1 row ) reverse Return an array that is in reverse order from the input array. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 select supa . reverse ( array [ 'a' , 'b' , 'c' ]); reverse --------- { c , b , a } ( 1 row ) select supa . reverse ( array [ 1 , 2 , 3 ]); reverse --------- { 3 , 2 , 1 } ( 1 row ) select supa . reverse ( array []:: int []); reverse --------- ( 1 row ) select supa . reverse ( null :: int []); reverse --------- ( 1 row ) unique Return an array containing unique elements of the input array. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 select supa . unique ( array [ 'a' , 'a' , 'b' , 'a' ]); unique -------- { a , b } ( 1 row ) select supa . unique ( array [ 1 , 2 , 3 , 2 ]); unique --------- { 1 , 2 , 3 } ( 1 row ) select supa . unique ( array []:: int []); unique -------- ( 1 row ) select supa . unique ( null :: int []); unique -------- ( 1 row ) Inspect table_row_count_estimate Return the approximate number of rows in a table. 1 2 3 4 5 6 7 8 9 10 11 12 13 begin ; select * into public . account from generate_series ( 1 , 100 ); analyze public . account ; select supa . table_row_count_estimate ( 'public.account' :: regclass ); table_row_count_estimate -------------------------- 100 ( 1 row ) rollback ; query_row_count_estimate Return the approximate number of rows to be selected in a query. 1 2 3 4 5 6 7 8 select supa . query_row_count_estimate ( $$ select * from generate_series ( 1 , 100 ); $$ :: text ); query_row_count_estimate -------------------------- 100 ( 1 row )","title":"Standard Library"},{"location":"standard_library/#library-reference","text":"The supabase platform nudges users to collocate compute with data than is typical for PostgreSQL backed applications. As a result, the PostgreSQL standard library All examples assume supautils was created in a schema named supa .","title":"Library Reference"},{"location":"standard_library/#array","text":"","title":"Array"},{"location":"standard_library/#index","text":"Return one-based index in the array of the first item whose value is equal to x. Returns null if there is no such item. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 select supa . index ( array [ 'a' , 'b' , 'c' ], 'c' ); index ------- 3 ( 1 row ) select supa . index ( array [ 1 , 2 , 3 ], 4 ); index ------- ( 1 row ) select supa . index ( array []:: int [], 1 ); index ------- ( 1 row ) select supa . index ( null :: int [], 1 ); index ------- ( 1 row )","title":"index"},{"location":"standard_library/#reverse","text":"Return an array that is in reverse order from the input array. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 select supa . reverse ( array [ 'a' , 'b' , 'c' ]); reverse --------- { c , b , a } ( 1 row ) select supa . reverse ( array [ 1 , 2 , 3 ]); reverse --------- { 3 , 2 , 1 } ( 1 row ) select supa . reverse ( array []:: int []); reverse --------- ( 1 row ) select supa . reverse ( null :: int []); reverse --------- ( 1 row )","title":"reverse"},{"location":"standard_library/#unique","text":"Return an array containing unique elements of the input array. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 select supa . unique ( array [ 'a' , 'a' , 'b' , 'a' ]); unique -------- { a , b } ( 1 row ) select supa . unique ( array [ 1 , 2 , 3 , 2 ]); unique --------- { 1 , 2 , 3 } ( 1 row ) select supa . unique ( array []:: int []); unique -------- ( 1 row ) select supa . unique ( null :: int []); unique -------- ( 1 row )","title":"unique"},{"location":"standard_library/#inspect","text":"","title":"Inspect"},{"location":"standard_library/#table_row_count_estimate","text":"Return the approximate number of rows in a table. 1 2 3 4 5 6 7 8 9 10 11 12 13 begin ; select * into public . account from generate_series ( 1 , 100 ); analyze public . account ; select supa . table_row_count_estimate ( 'public.account' :: regclass ); table_row_count_estimate -------------------------- 100 ( 1 row ) rollback ;","title":"table_row_count_estimate"},{"location":"standard_library/#query_row_count_estimate","text":"Return the approximate number of rows to be selected in a query. 1 2 3 4 5 6 7 8 select supa . query_row_count_estimate ( $$ select * from generate_series ( 1 , 100 ); $$ :: text ); query_row_count_estimate -------------------------- 100 ( 1 row )","title":"query_row_count_estimate"}]}